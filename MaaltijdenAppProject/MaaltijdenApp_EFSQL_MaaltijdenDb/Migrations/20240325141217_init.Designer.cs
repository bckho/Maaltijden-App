// <auto-generated />
using System;
using MaaltijdenApp_EFSQL_MaaltijdenDb;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MaaltijdenApp_EFSQL_MaaltijdenDb.Migrations
{
    [DbContext(typeof(MaaltijdenAppDbContext))]
    [Migration("20240325141217_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MaaltijdenApp_Core.Models.Canteen", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CanServeHotDinnerMeals")
                        .HasColumnType("bit");

                    b.Property<int>("City")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Canteens");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5fb90f12-22df-4793-905c-f1629276bba9"),
                            CanServeHotDinnerMeals = false,
                            City = 0,
                            Location = "Lovensdijk 61"
                        },
                        new
                        {
                            Id = new Guid("09b1199e-f178-43f9-9a51-991b152be347"),
                            CanServeHotDinnerMeals = true,
                            City = 0,
                            Location = "Hogeschoollaan"
                        });
                });

            modelBuilder.Entity("MaaltijdenApp_Core.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CanteenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EmployeeNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeNumber"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CanteenId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5641e7da-1ddd-4eca-ad3d-154919eaf61c"),
                            BirthDate = new DateTime(1984, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CanteenId = new Guid("5fb90f12-22df-4793-905c-f1629276bba9"),
                            Email = "a.koekenbakker@avans.nl",
                            EmployeeNumber = 0,
                            FirstName = "Alice",
                            LastName = "Koekenbakker"
                        },
                        new
                        {
                            Id = new Guid("86b2c9af-0215-492e-a037-8663fde75a51"),
                            BirthDate = new DateTime(1990, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CanteenId = new Guid("09b1199e-f178-43f9-9a51-991b152be347"),
                            Email = "r.bos@avans.nl",
                            EmployeeNumber = 0,
                            FirstName = "Rik",
                            LastName = "Bos"
                        });
                });

            modelBuilder.Entity("MaaltijdenApp_Core.Models.MealPackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CanteenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("City")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndPickupDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEighteenPlusOnly")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHotMeal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNoShow")
                        .HasColumnType("bit");

                    b.Property<int>("MealType")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ReservedByStudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartPickupDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CanteenId");

                    b.HasIndex("ReservedByStudentId");

                    b.ToTable("MealPackages");
                });

            modelBuilder.Entity("MaaltijdenApp_Core.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ContainsAlcohol")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsExample")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e381a329-205f-484c-b809-f668bc63281e"),
                            ContainsAlcohol = false,
                            Description = "Smaakvolle kippensoep met vermicelli en zachte kipballetjes.",
                            IsExample = true,
                            Name = "Kippensoep"
                        },
                        new
                        {
                            Id = new Guid("f19bada6-94ee-49eb-9da7-65f284e86487"),
                            ContainsAlcohol = false,
                            Description = "Pittige thaise curry met kip, peulboontjes en aubergine.",
                            IsExample = true,
                            Name = "Thaise groene curry"
                        },
                        new
                        {
                            Id = new Guid("7bcfbfa3-e200-47b5-8dbd-c98f0f30965f"),
                            ContainsAlcohol = false,
                            Description = "Versgeperste sinasappelsap zonder conservatieven.",
                            IsExample = true,
                            Name = "Sinasappelsap"
                        },
                        new
                        {
                            Id = new Guid("e05ae46c-23d3-4bf6-b716-771f78e0127c"),
                            ContainsAlcohol = false,
                            Description = "Lasagne met seizoensgroenten en verse pasta.",
                            IsExample = true,
                            Name = "Vegetarische lasagne"
                        },
                        new
                        {
                            Id = new Guid("bcecfc2c-8a37-4297-bb35-67eee658c31f"),
                            ContainsAlcohol = false,
                            Description = "Een klassieker! Met Unox rookworst.",
                            IsExample = true,
                            Name = "Broodje rookworst"
                        },
                        new
                        {
                            Id = new Guid("20588f72-28b0-4df5-a3f8-10aab358de01"),
                            ContainsAlcohol = true,
                            Description = "Bier.",
                            IsExample = true,
                            Name = "Leffe Blond"
                        });
                });

            modelBuilder.Entity("MaaltijdenApp_Core.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoShowCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7ee24e32-da28-4427-9126-d219aac4f81e"),
                            BirthDate = new DateTime(2000, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "h.kaasboer@student.avans.nl",
                            FirstName = "Henk",
                            LastName = "Kaasboer",
                            NoShowCount = 0
                        },
                        new
                        {
                            Id = new Guid("c77cd1c8-3b4b-497d-8551-50c4d13132a0"),
                            BirthDate = new DateTime(2008, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "b.boos@student.avans.nl",
                            FirstName = "Bob",
                            LastName = "Boos",
                            NoShowCount = 0
                        });
                });

            modelBuilder.Entity("MealPackageProduct", b =>
                {
                    b.Property<Guid>("MealPackagesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductsIndicatorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MealPackagesId", "ProductsIndicatorId");

                    b.HasIndex("ProductsIndicatorId");

                    b.ToTable("MealPackageProduct");
                });

            modelBuilder.Entity("MaaltijdenApp_Core.Models.Employee", b =>
                {
                    b.HasOne("MaaltijdenApp_Core.Models.Canteen", "Canteen")
                        .WithMany("Employees")
                        .HasForeignKey("CanteenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Canteen");
                });

            modelBuilder.Entity("MaaltijdenApp_Core.Models.MealPackage", b =>
                {
                    b.HasOne("MaaltijdenApp_Core.Models.Canteen", "Canteen")
                        .WithMany()
                        .HasForeignKey("CanteenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MaaltijdenApp_Core.Models.Student", "ReservedByStudent")
                        .WithMany("ReservedMealPackages")
                        .HasForeignKey("ReservedByStudentId");

                    b.Navigation("Canteen");

                    b.Navigation("ReservedByStudent");
                });

            modelBuilder.Entity("MealPackageProduct", b =>
                {
                    b.HasOne("MaaltijdenApp_Core.Models.MealPackage", null)
                        .WithMany()
                        .HasForeignKey("MealPackagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MaaltijdenApp_Core.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsIndicatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MaaltijdenApp_Core.Models.Canteen", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("MaaltijdenApp_Core.Models.Student", b =>
                {
                    b.Navigation("ReservedMealPackages");
                });
#pragma warning restore 612, 618
        }
    }
}
