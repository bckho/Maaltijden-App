// <auto-generated />
using System;
using MaaltijdenApp_IFSQL_IdentityDb;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MaaltijdenApp_IFSQL_IdentityDb.Migrations
{
    [DbContext(typeof(UserDbContext))]
    [Migration("20240325154442_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fe234169-2e29-467e-aa6f-08baf55d7e6b",
                            ConcurrencyStamp = "1",
                            Name = "employee",
                            NormalizedName = "employee"
                        },
                        new
                        {
                            Id = "c65a14bd-aee4-492e-86b8-1cc5724fe146",
                            ConcurrencyStamp = "2",
                            Name = "student",
                            NormalizedName = "student"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "626e6b3b-19c1-468d-9815-7c8507034d4a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4050e374-5f91-4068-b55a-ec97cdf8e194",
                            Email = "a.koekenbakker@avans.nl",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "a.koekenbakker@avans.nl",
                            NormalizedUserName = "alice.koekenbakker",
                            PasswordHash = "AQAAAAEAACcQAAAAEMSwk+kVaGUtP44O/Gfz+5VEKzy2eeQdq3h03gxQGOokunjHuSqKdHVVvfcgIdnKQA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a12aebd4-258e-47d3-a387-82eccdec542a",
                            TwoFactorEnabled = false,
                            UserName = "alice.koekenbakker"
                        },
                        new
                        {
                            Id = "b5ef3eeb-a2b0-4481-934f-39f0699d140e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e6eeb3ab-253d-464c-80cb-a225a59ae644",
                            Email = "h.kaasboer@student.avans.nl",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "h.kaasboer@student.avans.nl",
                            NormalizedUserName = "henk.kaasboer",
                            PasswordHash = "AQAAAAEAACcQAAAAEBpLb7jhmnouaBWlVILLlkPrB/gc8dLVwM5sXCkZ68Obe91u+NT1JsvHaI4QdS6pRA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4d33a77c-24d5-46b3-8923-0561bae0c236",
                            TwoFactorEnabled = false,
                            UserName = "henk.kaasboer"
                        },
                        new
                        {
                            Id = "6bc5482e-5619-492c-b1f4-97daca05a6bf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1af0a5d2-0f14-4b1e-80b3-585817a159d2",
                            Email = "r.bos@avans.nl",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "r.bos@avans.nl",
                            NormalizedUserName = "rik.bos",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ87SsQdRzgZD5GjOUgab+0jUYwpsYPp8KSy0c/afRH3cILjSFDf2YOsyAU8VXbE+Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "01ba9af2-ef21-485d-be21-9383917184fd",
                            TwoFactorEnabled = false,
                            UserName = "rik.bos"
                        },
                        new
                        {
                            Id = "ea3bfba8-32e9-4260-b073-00b2bae020db",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c93c240e-5130-4cc5-8f80-9625ef201356",
                            Email = "b.boos@student.avans.nl",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "b.boos@student.avans.nl",
                            NormalizedUserName = "bob.boos",
                            PasswordHash = "AQAAAAEAACcQAAAAEEST7F/kJog+aUD6MOLj4MdpDluFjXRkYPSaM2le5Y+vqm0JgAIKJ2cZvvd+MLfnZw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "89ad18c3-3b21-4686-a7c5-58ba5b2d17d3",
                            TwoFactorEnabled = false,
                            UserName = "bob.boos"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "626e6b3b-19c1-468d-9815-7c8507034d4a",
                            RoleId = "fe234169-2e29-467e-aa6f-08baf55d7e6b"
                        },
                        new
                        {
                            UserId = "b5ef3eeb-a2b0-4481-934f-39f0699d140e",
                            RoleId = "c65a14bd-aee4-492e-86b8-1cc5724fe146"
                        },
                        new
                        {
                            UserId = "ea3bfba8-32e9-4260-b073-00b2bae020db",
                            RoleId = "c65a14bd-aee4-492e-86b8-1cc5724fe146"
                        },
                        new
                        {
                            UserId = "6bc5482e-5619-492c-b1f4-97daca05a6bf",
                            RoleId = "fe234169-2e29-467e-aa6f-08baf55d7e6b"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
